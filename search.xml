<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用Excel制作贪吃蛇！</title>
      <link href="/2022/05/12/yong-excel-zhi-zuo-tan-chi-she/"/>
      <url>/2022/05/12/yong-excel-zhi-zuo-tan-chi-she/</url>
      
        <content type="html"><![CDATA[<p>废话不多说，先放成果。<a href="https://github.com/peler-little-pig/Greedy-snake">在GitHub上查看源代码</a> 。</p><p><img src="https://s1.ax1x.com/2022/05/12/O0pCzn.gif" alt="点击查看图片"></p><h2 id="开始编写"><a href="#开始编写" class="headerlink" title="开始编写"></a>开始编写</h2><p>阅读此教程，你需要了解</p><ul><li>什么是VBA，对VBA初步了解</li></ul><ul><li>如何在Excel中编辑VBA，并启用它</li></ul><p>否则请另行百度。</p><p>##最重要的两个函数</p><p><code>Range</code>和<code>Cells</code>是整个游戏程序中的核心，它们都能返回一个 <em><strong>表示一个单元格、一行、一列、一个包含单个或若干连续单元格区域的选定单元格范围，或者一个三维区域。（摘自<a href="https://docs.microsoft.com/zh-cn/office/vba/api/excel.range(object)">https://docs.microsoft.com/zh-cn/office/vba/api/excel.range(object)</a>）</strong></em></p><p>简单来说姐是能帮助我们获取到Excel中的每一个格子，以便我们操作他们的属性。</p><p>如以下代码：</p><pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic">Cells<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"贪吃蛇撞墙过猛，游戏结束"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取了<strong>y</strong>坐标为<strong>2</strong>，<strong>x</strong>坐标为<strong>22</strong>的单元格，并设置它的文本。（这里可能和我们平时的认知不太一样，<code>Cells</code>函数是<strong>y</strong>在前<strong>x</strong>在后的）</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>游戏初始化过程的代码如下：</p><pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic"><span class="token keyword">Option</span> Explicit<span class="token comment">'定义贪吃蛇坐标变量</span><span class="token keyword">Dim</span> snackX<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token keyword">Dim</span> snackY<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token comment">'定义贪吃蛇坐标引索</span><span class="token keyword">Dim</span> snackIndex <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token comment">'定义贪吃蛇移动变量</span><span class="token keyword">Dim</span> snackMoveX <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token keyword">Dim</span> snackMoveY <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token comment">'苹果坐标</span><span class="token keyword">Dim</span> appleX <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token keyword">Dim</span> appleY <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token comment">'游戏是否运行</span><span class="token keyword">Dim</span> isGameRunning <span class="token keyword">As</span> <span class="token keyword">Integer</span><span class="token comment">'导入win32API模块</span><span class="token directive property">#If VBA7 And Win64 Then</span>  <span class="token keyword">Private</span> <span class="token keyword">Declare</span> PtrSafe <span class="token keyword">Function</span> GetTickCount <span class="token keyword">Lib</span> <span class="token string">"kernel32"</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Long</span><span class="token operator">#</span><span class="token keyword">Else</span>  <span class="token keyword">Private</span> <span class="token keyword">Declare</span> <span class="token keyword">Function</span> GetTickCount <span class="token keyword">Lib</span> <span class="token string">"kernel32"</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">As</span> <span class="token keyword">Long</span><span class="token directive property">#End If</span><span class="token comment">'工具类函数</span><span class="token keyword">Private</span> <span class="token keyword">Sub</span> Sleep<span class="token punctuation">(</span>numa <span class="token keyword">As</span> <span class="token keyword">Double</span><span class="token punctuation">)</span>    <span class="token keyword">Dim</span> num1 <span class="token keyword">As</span> <span class="token keyword">Double</span>    <span class="token keyword">Dim</span> num2 <span class="token keyword">As</span> <span class="token keyword">Double</span>    <span class="token keyword">Dim</span> numb <span class="token keyword">As</span> <span class="token keyword">Double</span>        numb <span class="token operator">=</span> <span class="token number">0</span>    num1 <span class="token operator">=</span> GetTickCount        <span class="token keyword">Do</span> <span class="token keyword">While</span> numa <span class="token operator">-</span> numb <span class="token operator">&gt;</span> <span class="token number">0</span>      num2 <span class="token operator">=</span> GetTickCount      numb <span class="token operator">=</span> num2 <span class="token operator">-</span> num1      DoEvents    <span class="token keyword">Loop</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，第一行规定全局的变量必须定义后才可以使用，当然取消后代码也能正确运行，但会存在许多潜在的漏洞。</p><p>之后，是贪吃蛇和苹果位置信息的定义，以便我们可以全局使用它。需要注意的是，<code>贪吃蛇坐标变量</code>定义了两个长度为400的整形数组，这是经过了计算的，即贪吃蛇沾满格子的长度。</p><p>最后，我们导入了<code>kernel32</code>模块。又利用其中的<code>GetTickCount</code>定义了一个<code>Sleep</code>函数，用于延时，以控制游戏帧数。</p><h2 id="游戏基础——画布类"><a href="#游戏基础——画布类" class="headerlink" title="游戏基础——画布类"></a>游戏基础——画布类</h2><pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic"><span class="token comment">'画布类</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> CanvasClean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">With</span> Range<span class="token punctuation">(</span><span class="token string">"B2:S19"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Interior        <span class="token punctuation">.</span>Pattern <span class="token operator">=</span> xlNone        <span class="token punctuation">.</span>TintAndShade <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">.</span>PatternTintAndShade <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">End</span> <span class="token keyword">With</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> CanvasReLoad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">With</span> Range<span class="token punctuation">(</span><span class="token string">"A1:T20"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Interior        <span class="token punctuation">.</span>PatternColorIndex <span class="token operator">=</span> xlAutomatic        <span class="token punctuation">.</span>ThemeColor <span class="token operator">=</span> xlThemeColorLight1        <span class="token punctuation">.</span>TintAndShade <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">.</span>PatternTintAndShade <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">End</span> <span class="token keyword">With</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CanvasClean</code>函数，顾名思义，我们用其清理画布的区域。其中，使用<code>Range("B2:S19")</code>获取了Excel中的格子区域（图中框选区域），并将它清空。<img src="https://s1.ax1x.com/2022/05/12/O0pFs0.jpg" alt="点击查看图片"></p><p><code>CanvasReLoad</code>中，我们将整个黑框区域<em><strong>恢复原样</strong></em>，及在<code>CanvasClean</code>的基础上，将黑框也重新绘制。</p><p>为什么要这么做，给你看个图就知道了：</p><p><img src="https://s1.ax1x.com/2022/05/12/O0piMq.jpg" alt="点击查看图片"></p><h2 id="主角——贪吃蛇类"><a href="#主角——贪吃蛇类" class="headerlink" title="主角——贪吃蛇类"></a>主角——贪吃蛇类</h2><pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic"><span class="token comment">'贪吃蛇类</span><span class="token keyword">Private</span> <span class="token keyword">Sub</span> TextBox1_Change<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">Select</span> <span class="token keyword">Case</span> TextBox1<span class="token punctuation">.</span>Text        <span class="token keyword">Case</span> <span class="token keyword">Is</span> <span class="token operator">=</span> <span class="token string">"w"</span>            <span class="token keyword">If</span> snackMoveY <span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">Then</span>                snackMoveY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                snackMoveX <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">End</span> <span class="token keyword">If</span>        <span class="token keyword">Case</span> <span class="token keyword">Is</span> <span class="token operator">=</span> <span class="token string">"s"</span>            <span class="token keyword">If</span> snackMoveY <span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">Then</span>                snackMoveY <span class="token operator">=</span> <span class="token number">1</span>                snackMoveX <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">End</span> <span class="token keyword">If</span>        <span class="token keyword">Case</span> <span class="token keyword">Is</span> <span class="token operator">=</span> <span class="token string">"a"</span>            <span class="token keyword">If</span> snackMoveX <span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">Then</span>                snackMoveX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                snackMoveY <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">End</span> <span class="token keyword">If</span>        <span class="token keyword">Case</span> <span class="token keyword">Is</span> <span class="token operator">=</span> <span class="token string">"d"</span>            <span class="token keyword">If</span> snackMoveX <span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">Then</span>                snackMoveX <span class="token operator">=</span> <span class="token number">1</span>                snackMoveY <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">End</span> <span class="token keyword">If</span>    <span class="token keyword">End</span> <span class="token keyword">Select</span>    TextBox1<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> snackCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    snackIndex <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">Dim</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span>    <span class="token keyword">Dim</span> x <span class="token keyword">As</span> <span class="token keyword">Integer</span>    <span class="token keyword">Dim</span> y <span class="token keyword">As</span> <span class="token keyword">Integer</span>    x <span class="token operator">=</span> Int<span class="token punctuation">(</span>Rnd <span class="token operator">*</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>    y <span class="token operator">=</span> Int<span class="token punctuation">(</span>Rnd <span class="token operator">*</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>    <span class="token keyword">For</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">To</span> snackIndex        snackX<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> x        snackY<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> y <span class="token operator">+</span> i    <span class="token keyword">Next</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> snackMove<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">Dim</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span>    <span class="token keyword">For</span> i <span class="token operator">=</span> snackIndex <span class="token keyword">To</span> <span class="token number">1</span> <span class="token keyword">Step</span> <span class="token operator">-</span><span class="token number">1</span>        snackX<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> snackX<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        snackY<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> snackY<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">Next</span>    snackX<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> snackX<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> snackMoveX    snackY<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> snackY<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> snackMoveY<span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> snackDraw<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">Dim</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span>    <span class="token keyword">For</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">To</span> snackIndex        Cells<span class="token punctuation">(</span>snackY<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> snackX<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Interior<span class="token punctuation">.</span>Color <span class="token operator">=</span> <span class="token number">255</span>    <span class="token keyword">Next</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> snackHitWall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">If</span> snackX<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">Or</span> snackX<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token keyword">Or</span> snackY<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">Or</span> snackY<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token keyword">Then</span>        Cells<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"贪吃蛇撞墙过猛，游戏结束"</span>        isGameRunning <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">End</span> <span class="token keyword">If</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> snackEatApple<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">If</span> snackX<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> appleX <span class="token keyword">And</span> snackY<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> appleY <span class="token keyword">Then</span>        appleCreate        snackIndex <span class="token operator">=</span> snackIndex <span class="token operator">+</span> <span class="token number">1</span>        Cells<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">=</span> Int<span class="token punctuation">(</span>Cells<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">End</span> <span class="token keyword">If</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> snackHitHimself<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">Dim</span> i <span class="token keyword">As</span> <span class="token keyword">Integer</span>    <span class="token keyword">For</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">To</span> snackIndex        <span class="token keyword">If</span> snackX<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> snackX<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">And</span> snackY<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> snackY<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">Then</span>            Cells<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"贪吃蛇把自己吃了，游戏结束"</span>            isGameRunning <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">End</span> <span class="token keyword">If</span>    <span class="token keyword">Next</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你熟悉VB，那你一定看出来了，<code>TextBox1_Change</code>是TextBox1中的文本改变时自动调用的一个过程。我们在这里进行判断，已根据<em>WASD</em>的方向键调整贪吃蛇的移动量，<strong>最后再将其内容清空，以便下一次检测</strong> 。</p><p>其次，就是故名思意了：</p><ul><li>snackCreate——创建贪吃蛇</li><li>snackMove——根据贪吃蛇的移动量移动贪吃蛇</li><li>snackDraw——绘制贪吃蛇</li><li>snackHitWall——检测贪吃蛇是否撞到墙</li><li>snackEatApple——检测贪吃蛇是否吃到苹果</li><li>snackHitHimself——检测贪吃蛇是否把自己吃了</li></ul><h2 id="食物——苹果类"><a href="#食物——苹果类" class="headerlink" title="食物——苹果类"></a>食物——苹果类</h2><pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic"><span class="token comment">'苹果类</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> appleCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>    appleX <span class="token operator">=</span> Int<span class="token punctuation">(</span>Rnd <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>    appleY <span class="token operator">=</span> Int<span class="token punctuation">(</span>Rnd <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> appleDraw<span class="token punctuation">(</span><span class="token punctuation">)</span>    Cells<span class="token punctuation">(</span>appleY<span class="token punctuation">,</span> appleX<span class="token punctuation">)</span><span class="token punctuation">.</span>Interior<span class="token punctuation">.</span>Color <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与贪吃蛇基本相同，但简单许多：</p><ul><li>appleCreate——创建苹果</li><li>appleDraw——绘制苹果</li></ul><h2 id="游戏中的Main函数——游戏类"><a href="#游戏中的Main函数——游戏类" class="headerlink" title="游戏中的Main函数——游戏类"></a>游戏中的Main函数——游戏类</h2><pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic"><span class="token comment">'游戏类</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> restGame<span class="token punctuation">(</span><span class="token punctuation">)</span>    snackMoveY <span class="token operator">=</span> <span class="token number">0</span>    snackMoveX <span class="token operator">=</span> <span class="token number">1</span>    Cells<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"游戏中"</span>    Cells<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> beginGame<span class="token punctuation">(</span><span class="token punctuation">)</span>    isGameRunning <span class="token operator">=</span> <span class="token number">1</span>    restGame        CanvasReLoad        snackCreate    appleCreate        <span class="token keyword">Do</span> <span class="token keyword">While</span> isGameRunning <span class="token operator">=</span> <span class="token number">1</span>        CanvasClean                appleDraw                snackMove        snackDraw                snackHitWall        snackEatApple        snackHitHimself                Sleep <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>    <span class="token keyword">Loop</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span class="token keyword">Public</span> <span class="token keyword">Sub</span> stopGame<span class="token punctuation">(</span><span class="token punctuation">)</span>    isGameRunning <span class="token operator">=</span> <span class="token number">0</span>    Cells<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"游戏结束"</span><span class="token keyword">End</span> <span class="token keyword">Sub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>restGame</code>重置游戏，<code>stopGame</code>停止游戏。</p><p><code>beginGame</code>函数的逻辑为。</p><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">start<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 开始游戏is_gameRunning_true<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 将游戏状态设置为TurerestGame<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 重置游戏CanvasReLoad<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 重置画布snackCreate<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 创建贪食蛇appleCreate<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 创建苹果is_gameRunning<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> 游戏状态是否为TrueCanvasClean<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 清空画布appleDraw<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 绘制苹果snackMove<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 移动贪吃蛇snackDraw<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 绘制贪吃蛇snackHitWall<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 检测贪吃蛇是否撞到墙snackEatApple<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 检测贪吃蛇是否吃到苹果snackHitHimself<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 检测贪吃蛇是否把自己吃了sleep<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 延时<span class="token number">300</span>秒end<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 游戏结束start<span class="token operator">-</span><span class="token operator">&gt;</span>is_gameRunning_true<span class="token operator">-</span><span class="token operator">&gt;</span>restGame<span class="token operator">-</span><span class="token operator">&gt;</span>CanvasReLoad<span class="token operator">-</span><span class="token operator">&gt;</span>snackCreate<span class="token operator">-</span><span class="token operator">&gt;</span>appleCreate<span class="token operator">-</span><span class="token operator">&gt;</span>is_gameRunning<span class="token function">is_gameRunning</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>CanvasClean<span class="token operator">-</span><span class="token operator">&gt;</span>appleDraw<span class="token operator">-</span><span class="token operator">&gt;</span>snackMove<span class="token operator">-</span><span class="token operator">&gt;</span>snackDraw<span class="token operator">-</span><span class="token operator">&gt;</span>snackHitWall<span class="token operator">-</span><span class="token operator">&gt;</span>snackEatApple<span class="token operator">-</span><span class="token operator">&gt;</span>snackHitHimself<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">sleep</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>is_gameRunning<span class="token function">is_gameRunning</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> VBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 思考 </tag>
            
            <tag> VBA </tag>
            
            <tag> 贪吃蛇 </tag>
            
            <tag> Excel </tag>
            
            <tag> office </tag>
            
            <tag> visual basic </tag>
            
            <tag> 逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PelerDown震撼发布！</title>
      <link href="/2022/05/09/pelerdown-zhen-han-fa-bu/"/>
      <url>/2022/05/09/pelerdown-zhen-han-fa-bu/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是PelerDown"><a href="#什么是PelerDown" class="headerlink" title="什么是PelerDown"></a>什么是PelerDown</h2><p><strong>PelerDown</strong>是一款基于<strong>Perl</strong>的<em>Markdown</em>转<em>HTML</em>工具，目前最新版本为<code>1.0</code>。<a href="https://github.com/peler-little-pig/PelerDown">在GitHub上查看</a>。</p><h2 id="1-0版本简介"><a href="#1-0版本简介" class="headerlink" title="1.0版本简介"></a>1.0版本简介</h2><p><strong>PelerDown</strong>第一版，基本语法遵照<em>Github</em>，详见<a href="https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax</a></p><p>其中表格，脚注，列表排版等功能还未开发</p><p><strong>PelerDown</strong>通过读取同目录下的<code>text.txt</code>文件，经转换后打印出<em>HTML</em>语句。</p><p><strong>PelerDown</strong>目前极不完善，请等待更新<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="未来的更新"><a href="#未来的更新" class="headerlink" title="未来的更新"></a>未来的更新</h2><ul><li><input disabled="" type="checkbox"> 通过命令行的方式读取任意文件并输出</li><li><input disabled="" type="checkbox"> 增加脚注功能</li><li><input disabled="" type="checkbox"> 增加表格功能</li><li><input disabled="" type="checkbox"> 增加列表排版</li></ul>]]></content>
      
      
      <categories>
          
          <category> PelerDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PelerDown </tag>
            
            <tag> Markdown </tag>
            
            <tag> HTML </tag>
            
            <tag> GitHub </tag>
            
            <tag> 开源 </tag>
            
            <tag> 转换器 </tag>
            
            <tag> Perl </tag>
            
            <tag> 新品发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C++中的delete[] 和 new[] 操作符的讨论</title>
      <link href="/2022/05/04/guan-yu-c-zhong-de-delete-he-new-cao-zuo-fu-de-tao-lun/"/>
      <url>/2022/05/04/guan-yu-c-zhong-de-delete-he-new-cao-zuo-fu-de-tao-lun/</url>
      
        <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>最近一直在看 <strong>《C++程序设计》</strong> ，不得不说华章推出的<strong>“黑皮书”</strong>系列质量是真的高。在这本书的<strong>“动态内存管理“</strong>这一章里，有以下代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">double *array = new delete[3];delete[] array;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这段代码用 <strong>new[]</strong> 操作符创建了一个 <strong>double</strong> 数组，然后用 <strong>delete[]</strong> 操作符将数组删除。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>这就让我很不解啊， <strong>C++</strong> 又不知道我创建的数组的长度，如何做到删除呢？我为此专门试了一下。为方便观察，增加了赋值和输出。</p><h4 id="第一次实验"><a href="#第一次实验" class="headerlink" title="第一次实验"></a>第一次实验</h4><p>代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int main(void){    double *array = new double[3]{1,2,3};    cout&lt;&lt;array&lt;&lt;endl;    cout&lt;&lt;array[0]&lt;&lt;endl;    cout&lt;&lt;array[1]&lt;&lt;endl;    cout&lt;&lt;array[2]&lt;&lt;endl;    delete[] array;    cout&lt;&lt;array&lt;&lt;endl;    cout&lt;&lt;array[0]&lt;&lt;endl;    cout&lt;&lt;array[1]&lt;&lt;endl;    cout&lt;&lt;array[2]&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-none"><code class="language-none">0xe317601230xe317607.35363e-3177.35022e-3173<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个事情就魔幻起来了，看样子，<strong>C++</strong> 成功删除了数组的第<strong>1，2</strong> 个元素，但第三个元素没有删除。对了，<strong>g++</strong> 编译器配置如下：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\peler&gt;g+<span class="token operator">+</span> <span class="token operator">-</span>v<span class="token keyword">Using</span> built-in specs<span class="token punctuation">.</span>COLLECT_GCC=g+<span class="token operator">+</span>COLLECT_LTO_WRAPPER=D:<span class="token operator">/</span>Strawberry/c/bin/<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>libexec/gcc/x86_64-w64-mingw32/8<span class="token punctuation">.</span>3<span class="token punctuation">.</span>0/lto-wrapper<span class="token punctuation">.</span>exeTarget: x86_64-w64-mingw32Configured with: <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>src/gcc-8<span class="token punctuation">.</span>3<span class="token punctuation">.</span>0/configure <span class="token operator">--</span>host=x86_64-w64-mingw32 <span class="token operator">--</span>build=x86_64-w64-mingw32 <span class="token operator">--</span>target=x86_64-w64-mingw32 <span class="token operator">--</span>prefix=<span class="token operator">/</span>mingw64 <span class="token operator">--</span><span class="token function">enable-shared</span> <span class="token operator">--</span><span class="token function">enable-static</span> <span class="token operator">--</span><span class="token function">disable-multilib</span> <span class="token operator">--</span><span class="token function">enable-languages</span>=c<span class="token punctuation">,</span>c+<span class="token operator">+</span><span class="token punctuation">,</span>fortran<span class="token punctuation">,</span>lto <span class="token operator">--</span><span class="token function">enable-libstdcxx</span><span class="token operator">-</span>time=yes <span class="token operator">--</span><span class="token function">enable-threads</span>=posix <span class="token operator">--</span><span class="token function">enable-libgomp</span> <span class="token operator">--</span><span class="token function">enable-libatomic</span> <span class="token operator">--</span><span class="token function">enable-lto</span> <span class="token operator">--</span><span class="token function">enable-graphite</span> <span class="token operator">--</span><span class="token function">enable-checking</span>=release <span class="token operator">--</span><span class="token function">enable-fully</span><span class="token operator">-</span>dynamic-string <span class="token operator">--</span><span class="token function">enable-version</span><span class="token operator">-</span>specific-runtime-libs <span class="token operator">--</span><span class="token function">enable-libstdcxx</span><span class="token operator">-</span>filesystem-ts=yes <span class="token operator">--</span><span class="token function">disable-libstdcxx</span><span class="token operator">-</span>pch <span class="token operator">--</span><span class="token function">disable-libstdcxx</span><span class="token operator">-</span>debug <span class="token operator">--</span><span class="token function">disable-bootstrap</span> <span class="token operator">--</span><span class="token function">disable-rpath</span> <span class="token operator">--</span>disable-win32-registry <span class="token operator">--</span><span class="token function">disable-nls</span> <span class="token operator">--</span><span class="token function">disable-werror</span> <span class="token operator">--</span><span class="token function">disable-symvers</span> <span class="token operator">--</span>with-gnu-as <span class="token operator">--</span>with-gnu-ld <span class="token operator">--</span>with-arch=nocona <span class="token operator">--</span>with-tune=core2 <span class="token operator">--</span>with-libiconv <span class="token operator">--</span>with-system-zlib <span class="token operator">--</span>with-gmp=<span class="token operator">/</span>opt/build/prerequisites/x86_64-w64-mingw32-static <span class="token operator">--</span>with-mpfr=<span class="token operator">/</span>opt/build/prerequisites/x86_64-w64-mingw32-static <span class="token operator">--</span>with-mpc=<span class="token operator">/</span>opt/build/prerequisites/x86_64-w64-mingw32-static <span class="token operator">--</span>with-isl=<span class="token operator">/</span>opt/build/prerequisites/x86_64-w64-mingw32-static <span class="token operator">--</span>with-pkgversion=<span class="token string">'x86_64-posix-seh, Built by strawberryperl.com project'</span> <span class="token operator">--</span>with-bugurl=https:<span class="token operator">/</span><span class="token operator">/</span>sourceforge<span class="token punctuation">.</span>net/projects/mingw-w64 CFLAGS=<span class="token string">'-O2 -pipe -fno-ident -I/opt/build/x86_64-830-posix-seh-rt_v6/mingw64/opt/include -I/opt/build/prerequisites/x86_64-zlib-static/include -I/opt/build/prerequisites/x86_64-w64-mingw32-static/include'</span> CXXFLAGS=<span class="token string">'-O2 -pipe -fno-ident -I/opt/build/x86_64-830-posix-seh-rt_v6/mingw64/opt/include -I/opt/build/prerequisites/x86_64-zlib-static/include -I/opt/build/prerequisites/x86_64-w64-mingw32-static/include'</span> CPPFLAGS=<span class="token string">' -I/opt/build/x86_64-830-posix-seh-rt_v6/mingw64/opt/include -I/opt/build/prerequisites/x86_64-zlib-static/include -I/opt/build/prerequisites/x86_64-w64-mingw32-static/include'</span> LDFLAGS=<span class="token string">'-pipe -fno-ident -L/opt/build/x86_64-830-posix-seh-rt_v6/mingw64/opt/lib -L/opt/build/prerequisites/x86_64-zlib-static/lib -L/opt/build/prerequisites/x86_64-w64-mingw32-static/lib '</span> LD_FOR_TARGET=<span class="token operator">/</span>opt/build/x86_64-830-posix-seh-rt_v6/mingw64/bin/ld<span class="token punctuation">.</span>exeThread model: posixgcc version 8<span class="token punctuation">.</span>3<span class="token punctuation">.</span>0 <span class="token punctuation">(</span>x86_64-posix-seh<span class="token punctuation">,</span> Built by strawberryperl<span class="token punctuation">.</span>com project<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>不看不知道，一看吓一跳。问题出现了，我电脑中的 <strong>g++</strong> 居然是 <strong>StrawberryPerl</strong> 中的，用了这么久都没发现，肯定是系统变量的问题，真是 <strong>“C生万物”</strong> 啊。虽然我觉得这不会影响运行结果，但我还是修改了一下，现在版本正常：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">PS</span> C:\Users\peler&gt; g+<span class="token operator">+</span> <span class="token operator">-</span>v<span class="token keyword">Using</span> built-in specs<span class="token punctuation">.</span>COLLECT_GCC=D:\MinGW\bin\g+<span class="token operator">+</span><span class="token punctuation">.</span>exeCOLLECT_LTO_WRAPPER=d:<span class="token operator">/</span>mingw/bin/<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>libexec/gcc/i686-w64-mingw32/11<span class="token punctuation">.</span>2<span class="token punctuation">.</span>0/lto-wrapper<span class="token punctuation">.</span>exeTarget: i686-w64-mingw32Configured with: <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>source/gcc-11<span class="token punctuation">.</span>2<span class="token punctuation">.</span>0/configure <span class="token operator">--</span>build=x86_64-pc-linux-gnu <span class="token operator">--</span>target=i686-w64-mingw32 <span class="token operator">--</span>host=i686-w64-mingw32 <span class="token operator">--</span><span class="token function">disable-shared</span> <span class="token operator">--</span><span class="token function">enable-static</span> <span class="token operator">--</span><span class="token function">disable-nls</span> <span class="token operator">--</span><span class="token function">disable-multilib</span> <span class="token operator">--</span>prefix=<span class="token operator">/</span>home/hendrik/mingw/target/mingw-w64-i686 <span class="token operator">--</span>with-sysroot=<span class="token operator">/</span>home/hendrik/mingw/target/mingw-w64-i686 <span class="token operator">--</span>with-mpc=<span class="token operator">/</span>home/hendrik/mingw/target/pkgs/mpc/mpc-1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1-x86_64 <span class="token operator">--</span>with-mpfr=<span class="token operator">/</span>home/hendrik/mingw/target/pkgs/mpfr/mpfr-4<span class="token punctuation">.</span>1<span class="token punctuation">.</span>0-x86_64 <span class="token operator">--</span>with-gmp=<span class="token operator">/</span>home/hendrik/mingw/target/pkgs/gmp/gmp-6<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1-x86_64 <span class="token operator">--</span>with-isl=<span class="token operator">/</span>home/hendrik/mingw/target/pkgs/isl/isl-0<span class="token punctuation">.</span>18-x86_64 <span class="token operator">--</span><span class="token function">enable-languages</span>=c<span class="token punctuation">,</span>c+<span class="token operator">+</span> <span class="token operator">--</span><span class="token function">enable-fully</span><span class="token operator">-</span>dynamic-string <span class="token operator">--</span><span class="token function">enable-lto</span>Thread model: win32Supported LTO compression algorithms: zlibgcc version 11<span class="token punctuation">.</span>2<span class="token punctuation">.</span>0 <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二次实验"><a href="#第二次实验" class="headerlink" title="第二次实验"></a>第二次实验</h4><p>代码还是一样的：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int main(void){    double *array = new double[3]{1,2,3};    cout&lt;&lt;array&lt;&lt;endl;    cout&lt;&lt;array[0]&lt;&lt;endl;    cout&lt;&lt;array[1]&lt;&lt;endl;    cout&lt;&lt;array[2]&lt;&lt;endl;    delete[] array;    cout&lt;&lt;array&lt;&lt;endl;    cout&lt;&lt;array[0]&lt;&lt;endl;    cout&lt;&lt;array[1]&lt;&lt;endl;    cout&lt;&lt;array[2]&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">0x11215a01230x11215a01.64077e-30320<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就更悬了， <strong>g++</strong> 把数组第二项保留，其余的删除了。 </p><h4 id="第三次实验"><a href="#第三次实验" class="headerlink" title="第三次实验"></a>第三次实验</h4><p>我开始怀疑是类型的问题，于是把代码修改了，还增加了列表长度：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int main(void){    int *array = new int[10]{10,20,30,40,50,60,70,80,90,100};    cout&lt;&lt;array&lt;&lt;endl;    cout&lt;&lt;array[0]&lt;&lt;endl;    cout&lt;&lt;array[1]&lt;&lt;endl;    cout&lt;&lt;array[2]&lt;&lt;endl;    cout&lt;&lt;array[3]&lt;&lt;endl;    cout&lt;&lt;array[4]&lt;&lt;endl;    cout&lt;&lt;array[5]&lt;&lt;endl;    cout&lt;&lt;array[6]&lt;&lt;endl;    cout&lt;&lt;array[7]&lt;&lt;endl;    cout&lt;&lt;array[8]&lt;&lt;endl;    cout&lt;&lt;array[9]&lt;&lt;endl;    delete[] array;    cout&lt;&lt;array&lt;&lt;endl;    cout&lt;&lt;array[0]&lt;&lt;endl;    cout&lt;&lt;array[1]&lt;&lt;endl;    cout&lt;&lt;array[2]&lt;&lt;endl;    cout&lt;&lt;array[3]&lt;&lt;endl;    cout&lt;&lt;array[4]&lt;&lt;endl;    cout&lt;&lt;array[5]&lt;&lt;endl;    cout&lt;&lt;array[6]&lt;&lt;endl;    cout&lt;&lt;array[7]&lt;&lt;endl;    cout&lt;&lt;array[8]&lt;&lt;endl;    cout&lt;&lt;array[9]&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none">0x1b015a01020304050607080901000x1b015a0283412882831174430405060708090100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和上面大同小异吧，还是没有完全删除。</p><h4 id="第四次实验"><a href="#第四次实验" class="headerlink" title="第四次实验"></a>第四次实验</h4><p>我又想到换一个编译器尝试，信息如下：</p><pre class="line-numbers language-none"><code class="language-none">Microsoft Visual Studio Community 2019版本 16.11.11VisualStudio.16.Release/16.11.11+32228.343Microsoft .NET Framework版本 4.8.04161已安装的版本: CommunityVisual C++ 2019   00435-00000-00000-AA668Microsoft Visual C++ 2019Microsoft Visual C++ 向导   1.0Microsoft Visual C++ 向导Microsoft Visual Studio VC 软件包   1.0Microsoft Visual Studio VC 软件包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行同上的代码，由于有成熟的 <strong>DEBUG</strong> 系统，在输出删除数组的值时报错了：<br><a href="https://imgtu.com/i/OE23rR"><img src="https://s1.ax1x.com/2022/05/04/OE23rR.jpg" alt="查看图片"></a></p><p>有趣的是，错误信息是：</p><pre class="line-numbers language-none"><code class="language-none">引发了异常: 读取访问权限冲突。**array** 是 0x8123。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与 <strong>g++</strong> 不同，原本指向被删除的数组的指针被改变了，并且不是变为 <strong>nullptr</strong> ，试了好几次，都是 <strong>0x8123</strong> 。这可能是什么特定的值吧。这让我联想起机械硬盘删除数据的方法——把删除的地方标记为空，但数据却没有消失，只是在等待下一次存数据时覆盖掉。 <strong>Visual C++</strong> 的策略是不是也如此，删除数组时只将指针指向一个特定值，把原来的空间在系统的内存管理里标记为空？ </p><h4 id="第五次实验"><a href="#第五次实验" class="headerlink" title="第五次实验"></a>第五次实验</h4><p>我又专门写了以下代码尝试：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int main(void){    int* array = new int[10]{ 10,20,30,40,50,60,70,80,90,100 };    int* array_copy = array;    cout &lt;&lt; array &lt;&lt; endl;    cout &lt;&lt; array[0] &lt;&lt; endl;    cout &lt;&lt; array[1] &lt;&lt; endl;    cout &lt;&lt; array[2] &lt;&lt; endl;    cout &lt;&lt; array[3] &lt;&lt; endl;    cout &lt;&lt; array[4] &lt;&lt; endl;    cout &lt;&lt; array[5] &lt;&lt; endl;    cout &lt;&lt; array[6] &lt;&lt; endl;    cout &lt;&lt; array[7] &lt;&lt; endl;    cout &lt;&lt; array[8] &lt;&lt; endl;    cout &lt;&lt; array[9] &lt;&lt; endl;    delete[] array;    cout &lt;&lt; array &lt;&lt; endl;    cout &lt;&lt; array_copy &lt;&lt; endl;    cout &lt;&lt; array_copy[0] &lt;&lt; endl;    cout &lt;&lt; array_copy[1] &lt;&lt; endl;    cout &lt;&lt; array_copy[2] &lt;&lt; endl;    cout &lt;&lt; array_copy[3] &lt;&lt; endl;    cout &lt;&lt; array_copy[4] &lt;&lt; endl;    cout &lt;&lt; array_copy[5] &lt;&lt; endl;    cout &lt;&lt; array_copy[6] &lt;&lt; endl;    cout &lt;&lt; array_copy[7] &lt;&lt; endl;    cout &lt;&lt; array_copy[8] &lt;&lt; endl;    cout &lt;&lt; array_copy[9] &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-none"><code class="language-none">0129F918102030405060708090100000081230129F918-572662307-572662307-572662307-572662307-572662307-572662307-572662307-572662307-572662307-572662307E:\ProgramProject\VisualStudioProjects\Visual C++\test\test\Debug\test.exe (进程 1752)已退出，代码为 0。要在调试停止时自动关闭控制台，请启用“工具”-&gt;“选项”-&gt;“调试”-&gt;“调试停止时自动关闭控制台”。按任意键关闭此窗口. . .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除成功了！原来位置的值变了！不过也是好几次都是 <strong>-572662307</strong> 。这个有时间在讨论，暂且先放在这儿。</p><h3 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h3><p>那回到原本的问题，C++是怎么知道我的数组有多少个呢？我想到几点可能：</p><h4 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h4><ul><li>C++保存了列表长度等信息</li><li>C++像读取链表一样，判断下一个元素是不是赋过值的。如果是，删除；否则，结束。</li></ul><p>想归想，但由于能力不够，还是得用万能的搜索引擎，参考的网址放在附录了。大概意思就是我猜想的第一条，C++会在数组前面保存数组的信息。如图：</p><p><a href="https://imgtu.com/i/OERiFK"><img src="https://s1.ax1x.com/2022/05/04/OERiFK.png" alt="查看图片"></a></p><p>####验证</p><p>代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;int main(void){    int* p = new int[10];    int n1 = *((int*)p - 1);    int n2 = *((int*)p - 2);    int n3 = *((int*)p - 3);    int n4 = *((int*)p - 4);    cout &lt;&lt; n1 &lt;&lt; endl;    cout &lt;&lt; n2 &lt;&lt; endl;    cout &lt;&lt; n3 &lt;&lt; endl;    cout &lt;&lt; n4 &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">-33686019161401E:\ProgramProject\VisualStudioProjects\Visual C++\test\test\Debug\test.exe (进程 13416)已退出，代码为 0。要在调试停止时自动关闭控制台，请启用“工具”-&gt;“选项”-&gt;“调试”-&gt;“调试停止时自动关闭控制台”。按任意键关闭此窗口. . .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三行的 <strong>40</strong> 就是数组的长度，用 <strong>40/sizeof(int)</strong> 可以算出来，为 <strong>10</strong> ，和实际一样。严谨起见，其它条件不变，将 <strong>“定义数组”</strong> 的一行改为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* p = new int[20];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次实验，输出如下：</p><pre class="line-numbers language-none"><code class="language-none">-33686019163801E:\ProgramProject\VisualStudioProjects\Visual C++\test\test\Debug\test.exe (进程 12092)已退出，代码为 0。要在调试停止时自动关闭控制台，请启用“工具”-&gt;“选项”-&gt;“调试”-&gt;“调试停止时自动关闭控制台”。按任意键关闭此窗口. . .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三行变为 <strong>80</strong> ，以 <strong>40/sizeof(int)</strong> 计算，结果仍为10。</p><p>###思考</p><p>真相大白了，写一些自己的想法。</p><h4 id="对C-的看法"><a href="#对C-的看法" class="headerlink" title="对C++的看法"></a>对C++的看法</h4><p>在我看来，<strong>C++</strong> 将 <strong>C</strong> 提升到了一个新的高度 可以说，将 <strong>“C是套了一层壳的汇编”</strong> 提升到了 <strong>“高级程序设计语言”</strong> （从另一个层面说， <strong>C++</strong> 定义了 <strong>“高级程序设计语言”</strong> ）。其中的 <strong>重载，模板，自定义操作符</strong> 等功能让我震惊。特别是 <strong>自定义操作符</strong> ，就算在 <strong>“从C++发展出来”</strong> 语言中我也没听说过。这些功能也说明了为何 <strong>“C生C++，C++生万物”</strong> ，实在是太强大了！这也体现了我之前想创造自己的编程语言的想法，是多么可笑。不过，从将近一年多断断续续的摸爬滚打中积累出来的经验是宝贵的，毕竟把 <strong>《编译原理》</strong> 看的差不多了，还是有很多收获的。</p><h4 id="C-为什么没有数组越界检测"><a href="#C-为什么没有数组越界检测" class="headerlink" title="C++为什么没有数组越界检测"></a>C++为什么没有数组越界检测</h4><p>回到这件事，我一开始觉得第一条猜想最不可能，但事实就是如此。那既然这样， <strong>C++</strong> 为何不加入数组的越界检测呢？这样就不会出现 <strong>for</strong> 循环中的诡异错误。难道是为了和 <strong>C</strong> 接轨？不过，再思考一下，我们似乎也不需要这样的功能了，在先进一点的 <strong>IDE</strong> 中，如 <strong>Visual Studio</strong> 都有成熟的 <strong>DEBUG</strong> 功能，甚至在编写阶段编辑器就会有提示。操作系统中的内存管理也更成熟，进程之间的内存分离让我们不小心写出这种 <strong>BUG</strong> 时不至于让其他软件，甚至整个系统崩掉。数组越界检测的功能好像已经用不同的方式实现了。为此再在编译器中加这个功能，似乎就不那么必要了，还会拖慢速度。</p><h4 id="我们该使用-new-和-delete-吗"><a href="#我们该使用-new-和-delete-吗" class="headerlink" title="我们该使用 new[] 和 delete[] 吗"></a>我们该使用 new[] 和 delete[] 吗</h4><p>在网上浏览关于这方面的信息时，看到过好几次这样的讨论。在我看来，这种操作让 <strong>C++</strong> 不再<strong>硬核</strong>了。以前认为 <strong>C++</strong> 很硬核，因为比起 <strong>Java</strong> 等很多语言的<strong>“垃圾回收”，“自动装箱”</strong>等功能，**C++**很多时候连内存管理都得自己搞，用刘墉的话说就是“没有暗箱操作”。但了解 <strong>new[]</strong> 和 <strong>delete[]</strong> 实现后，发现 <strong>C++</strong> 编译器还是帮我们做了很多事情的。就像在 <strong>Python</strong> 中创建列表，眼看就简单一行，实际上内存中还存着其它内容。<br><a href="https://imgtu.com/i/OEReOA"><img src="https://s1.ax1x.com/2022/05/04/OEReOA.jpg" alt="查看图片"></a></p><p>这样是更智能了，但也让很多东西不清晰可见了。而且，只有用 <strong>new[]</strong> 创建的数组在 <strong>g++</strong> 的编译下才会保存长度等信息， <strong>delete[]</strong> 才能正确删除。但是，如果一个程序很长很复杂，很多代码还不是我写的，那我怎么知道一个数组能不能用 <strong>delete[]</strong> 释放呢？搞不好还会出现 <strong>BUG</strong> 。</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.zhihu.com/question/25556263/answer/32589012">https://www.zhihu.com/question/25556263/answer/32589012</a></li><li><a href="https://www.zhihu.com/question/25438329/answer/36980855">https://www.zhihu.com/question/25438329/answer/36980855</a></li><li><a href="https://www.zhihu.com/question/266130564/answer/314313658">https://www.zhihu.com/question/266130564/answer/314313658</a></li><li><a href="https://www.cnblogs.com/simplepaul/p/6861210.html">https://www.cnblogs.com/simplepaul/p/6861210.html</a></li><li><a href="https://blog.csdn.net/pizi0475/article/details/7575188">https://blog.csdn.net/pizi0475/article/details/7575188</a></li><li><a href="https://www.zhihu.com/question/291750903/answer/477250840">https://www.zhihu.com/question/291750903/answer/477250840</a></li><li><a href="https://www.zhihu.com/question/481334153/answer/2090890026">https://www.zhihu.com/question/481334153/answer/2090890026</a></li><li><a href="https://en.cppreference.com/w/cpp/language/delete">https://en.cppreference.com/w/cpp/language/delete</a></li><li><a href="https://en.cppreference.com/w/cpp/memory/new/operator_delete">https://en.cppreference.com/w/cpp/memory/new/operator_delete</a></li></ul><h4 id="写第一篇博客的感受"><a href="#写第一篇博客的感受" class="headerlink" title="写第一篇博客的感受"></a>写第一篇博客的感受</h4><p>深夜，吃完泡面 <strong>（不是足时发酵的老坛酸菜）</strong> ，把满书桌的作业搬走，拿出电脑，打开一个小时前刚下载的 <strong>Typora</strong> ，用白天看着 <strong>《了不起Markdown》</strong> 学会的知识，把自己平常编程的一件小事记录下来。神清气爽。身为一名初中生，从小学接触编程开始，没有人讨论编程相关的问题就是我最难受的一件事——有些同学喜欢数学，还可以跟老师讨论，而且课间还在研究题目看着就很好学。而我抱着本编程书就显得尴尬多了，而且要不是我露过几手，肯定还以为我在装B（而且上初中了学校还不让带课外书，好兄弟都被收了无数本小说了。保险起见，我现在都带英文的，这样被发现了也有点借口）。而自学编程摸爬滚打了这么久，<strong>CSDN</strong>，<strong>博客园</strong>，<strong>简书</strong>什么的肯定是久仰大名，于是便有了自己写博客的想法。我知道自己的思考<strong>很不成熟</strong>，对各种事的认知上还存在偏差，文章估计也没多少人看，但至少以后回顾我这段时光，不是<strong>“这个人很懒，什么也没有留下”</strong>了。（格局大了）</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 底层 </tag>
            
            <tag> 编译器 </tag>
            
            <tag> 杂谈 </tag>
            
            <tag> 思考 </tag>
            
            <tag> gcc </tag>
            
            <tag> Visual Studio </tag>
            
            <tag> Visual C++ </tag>
            
            <tag> 数组 </tag>
            
            <tag> 内存 </tag>
            
            <tag> 指针 </tag>
            
            <tag> 硬核分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/03/hello-world/"/>
      <url>/2022/05/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/05/03/test/"/>
      <url>/2022/05/03/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
